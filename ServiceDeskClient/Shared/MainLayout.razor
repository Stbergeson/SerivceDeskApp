@inherits LayoutComponentBase
@inject NavigationManager nav
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager

<PageTitle>ServiceDeskClient</PageTitle>
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />


<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/Stbergeson/SerivceDeskApp" Target="_blank" />
    </MudAppBar>
    <MudDrawer @bind-Open="@open" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Service Desk</MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Icon="@Icons.Material.Filled.Home" Match="NavLinkMatch.All" Href="/">Home</MudNavLink>
            <MudNavLink Icon="@Icons.Material.Filled.ListAlt"  Match="NavLinkMatch.All" Href="/WorkList">Tickets</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class="pt-16 px-16">
        <MudContainer Class="mt-6">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code {

    [CascadingParameter] protected Task<AuthenticationState> AuthState { get; set; }

    private HttpContextAccessor _httpContextAccessor = new();
    bool open = false;

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await AuthState).User;

        //redirect user if not logged in
        if (!user.Identity.IsAuthenticated)
        {
            nav.NavigateTo($"/Identity/Account/Login");
        }

        //if user is logged in confirm their tokens, otherwise log them out
        string bearerToken = _httpContextAccessor.HttpContext!.Request.Cookies["apiBearerToken"]!;
        string refreshToken = _httpContextAccessor.HttpContext!.Request.Cookies["apiRefreshToken"]!;

        if(bearerToken == null)
        {
            if(refreshToken != null)
            {
               

            }else{
                //sign the user out and redirect to login
                await SignInManager.SignOutAsync();
                nav.NavigateTo($"/Identity/Account/Login");
            }
        }
    }


    void ToggleDrawer()
    {
        open = !open;
    }
}
